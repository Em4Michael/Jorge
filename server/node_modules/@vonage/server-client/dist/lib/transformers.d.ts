export type TransformFunction = (key: string) => string;
export type ObjectToTransform = Record<string | number, unknown>;
export type TransformedObject = Record<string | number, unknown>;
export type TransformFunctionPartialParams = [ObjectToTransform, boolean, boolean];
export type PartialTransformFunction = (objectToTransform: ObjectToTransform, deep?: boolean, preserve?: boolean) => TransformedObject;
export type TransformObjectKeys = (transformFn: TransformFunction, objectToTransform: ObjectToTransform, deep?: boolean, preserve?: boolean) => TransformedObject;
export type OmitFunction = (keys: Array<string>, obj: ObjectToTransform) => TransformedObject;
export type AnyTransformFunction = PartialTransformFunction | TransformObjectKeys | OmitFunction;
/**
 * Transforms the keys of an object based on a provided transformation function.
 *
 * @param {TransformFunction} transformFn - The function to transform the object's keys.
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with transformed keys.
 */
export declare const transformObjectKeys: <T = TransformedObject, O = ObjectToTransform>(transformFn: TransformFunction, objectToTransform: O, deep?: boolean, preserve?: boolean) => T;
/**
 * Transforms the keys of an object to camelCase.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with camelCased keys.
 */
export declare const camelCaseObjectKeys: (rest_0: ObjectToTransform, rest_1: boolean, rest_2: boolean) => TransformedObject;
/**
 * Transforms the keys of an object to snake_case.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with snake_cased keys.
 */
export declare const snakeCaseObjectKeys: (rest_0: ObjectToTransform, rest_1: boolean, rest_2: boolean) => TransformedObject;
/**
 * Transforms the keys of an object to kebab-case.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with kebab-cased keys.
 */
export declare const kebabCaseObjectKeys: (rest_0: ObjectToTransform, rest_1: boolean, rest_2: boolean) => TransformedObject;
/**
 * Omit keys from an object.
 *
 * @param {Array<string>} keys - The keys to omit.
 * @param {Record<string | number, unknown>} obj - The object from which to omit keys.
 *
 * @return {Record<string | number, unknown>} A new object with omitted keys.
 */
export declare const omit: (keys: Array<string>, obj: ObjectToTransform) => TransformedObject;
//# sourceMappingURL=transformers.d.ts.map